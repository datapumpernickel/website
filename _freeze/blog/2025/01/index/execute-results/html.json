{
  "hash": "0f04adc7f369623b80dd60187f95027d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part II: Who wrote the last coalition agreement in Germany?\"\ndate: 2025-09-28\ndescription: \"After discovering the limitations of pretrained topic classification, I pivot to using actual Manifesto Project data to trace party contributions through embeddings and cosine similarity.\"\nimage: \"index_files/figure-html/fig-1-topic-plot-1.png\"\ncategories:\n  - r\n  - python\n  - sentence-transformer\n  - nlp\nformat:\n  html: \n    shift-heading-level-by: 1\nexecute:\n  code-fold: true\ncitation: true\nbibliography: references.bib\n---\n\n**Please see [Part I](../../2024/03/index.qmd) of this blog entry for an introduction to the topic.**\n\n## The Original Plan (And Why It Failed)\n\nIn [Part I](../../2024/03/index.qmd), I used sentence embeddings and cosine similarity to identify which party programs were most similar to each sentence in the coalition agreement. The next logical step seemed straightforward: classify each sentence by policy topic using a pretrained transformer model trained on Manifesto Project data. This would allow me to see whether parties contributed sentences according to their core issue areas.\n\nThe theory was sound. If the Greens dominated sentences about environmental protection, or the SPD controlled welfare policy language, this would validate both the attribution method and reveal each party's negotiating influence.\n\nSo I loaded the `manifestoberta-xlm-roberta-56policy-topics-sentence-2024-1-1` model and classified every sentence in the coalition agreement and party programs.\n\nThe results were... not great.\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Click here to see classification code\"}\nimport os\nimport torch\nfrom transformers import AutoModelForSequenceClassification, AutoTokenizer\nimport pandas as pd\nfrom tqdm import tqdm\n\noutput_path = \"sentences_with_topics.csv\"\n\nif os.path.exists(output_path):\n    df = pd.read_csv(output_path)\nelse:\n    # Load model & tokenizer\n    model = AutoModelForSequenceClassification.from_pretrained(\"manifesto-project/manifestoberta-xlm-roberta-56policy-topics-sentence-2024-1-1\")\n    tokenizer = AutoTokenizer.from_pretrained(\"xlm-roberta-large\")\n    device = torch.device(\"mps\") if torch.backends.mps.is_available() else torch.device(\"cpu\")\n    model.to(device)\n\n    # Read sentences\n    df = r.sentence_sample\n    def get_topic(sentence):\n        inputs = tokenizer(\n            str(sentence),\n            return_tensors=\"pt\",\n            max_length=200,\n            padding=\"max_length\",\n            truncation=True\n        )\n        inputs = {k: v.to(device) for k, v in inputs.items()}\n        with torch.no_grad():\n            logits = model(**inputs).logits\n        predicted_class = model.config.id2label[logits.argmax().item()]\n        return predicted_class\n\n    tqdm.pandas()\n    df['topic'] = df['text'].progress_apply(get_topic)\n\n    df.to_csv(output_path, index=False)\n    print(f\"Saved results to {output_path}\")\n```\n:::\n\n\n::: {.panel-tabset}\n\n## Table\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"oxgdyentzr\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#oxgdyentzr table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#oxgdyentzr thead, #oxgdyentzr tbody, #oxgdyentzr tfoot, #oxgdyentzr tr, #oxgdyentzr td, #oxgdyentzr th {\n  border-style: none;\n}\n\n#oxgdyentzr p {\n  margin: 0;\n  padding: 0;\n}\n\n#oxgdyentzr .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#oxgdyentzr .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#oxgdyentzr .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#oxgdyentzr .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#oxgdyentzr .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#oxgdyentzr .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#oxgdyentzr .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#oxgdyentzr .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#oxgdyentzr .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#oxgdyentzr .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#oxgdyentzr .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#oxgdyentzr .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#oxgdyentzr .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#oxgdyentzr .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#oxgdyentzr .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxgdyentzr .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#oxgdyentzr .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#oxgdyentzr .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#oxgdyentzr .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxgdyentzr .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#oxgdyentzr .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxgdyentzr .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#oxgdyentzr .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxgdyentzr .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#oxgdyentzr .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#oxgdyentzr .gt_left {\n  text-align: left;\n}\n\n#oxgdyentzr .gt_center {\n  text-align: center;\n}\n\n#oxgdyentzr .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#oxgdyentzr .gt_font_normal {\n  font-weight: normal;\n}\n\n#oxgdyentzr .gt_font_bold {\n  font-weight: bold;\n}\n\n#oxgdyentzr .gt_font_italic {\n  font-style: italic;\n}\n\n#oxgdyentzr .gt_super {\n  font-size: 65%;\n}\n\n#oxgdyentzr .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#oxgdyentzr .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#oxgdyentzr .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#oxgdyentzr .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#oxgdyentzr .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#oxgdyentzr .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#oxgdyentzr .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#oxgdyentzr .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#oxgdyentzr div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style><span data-qmd-base64=\"PHN0cm9uZz5DbGFzc2lmaWNhdGlvbiBSZXN1bHRzPC9zdHJvbmc+\"><span class='gt_from_md'><strong>Classification Results</strong></span></span></td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>from coalition and party programs</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"party\"><span data-qmd-base64=\"PHN0cm9uZz5QYXJ0eTwvc3Ryb25nPg==\"><span class='gt_from_md'><strong>Party</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"topic\"><span data-qmd-base64=\"PHN0cm9uZz5Ub3BpYzwvc3Ryb25nPg==\"><span class='gt_from_md'><strong>Topic</strong></span></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"text\"><span data-qmd-base64=\"PGVtPlRleHQ8L2VtPg==\"><span class='gt_from_md'><em>Text</em></span></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">FDP</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">701 - Labour Groups: Positive</td>\n<td headers=\"text\" class=\"gt_row gt_left\">PRESSE- UND MEINUNGSFREIHEIT SCHÜTZEN Presse- und Meinungsfreiheit sind Grundpfeiler unserer liberalen und offenen demokratischen Gesellschaft.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">FDP</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">107 - Internationalism: Positive</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Zeitarbeit sichert Teilhabe für die Beschäftigten und Flexibilität für die Unternehmen.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">GRUENE</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">304 - Political Corruption</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Wir wollen insbesondere die demokratische Kontrolle   81 Ka pi te l 2  bei der regulatorischen Kooperation verbessern.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">GRUENE</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">110 - European Community/Union: Negative</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Sommercamps und Nachhilfe in den Kernfächern alleine werden nicht ausreichen, um die Folgen der Krise zu bewältigen.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">KOALITION</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">606 - Civic Mindedness: Positive</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Geprüft wird die Errichtung einer Stiftung oder Gesellschaft, die den Rückbau der Kohleverstromung und die Renaturierung organisiert.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">KOALITION</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">104 - Military: Positive</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Das Brennstoffemissionshandelsgesetz (BEHG), einschließlich der erfassten Brennstoffemissionen in der Industrie (industrielle Prozesswärme), wollen wir auf seine Kompatibilität mit einem möglichen ETS 2 überprüfen und gegebenenfalls so anpassen, dass ein möglichst reibungsloser Übergang gewährleistet ist.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">SPD</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">606 - Civic Mindedness: Positive</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Wir werden eine nationale Leitstelle Mobilität einrichten, die die Erarbeitung regionaler Mobilitätspläne unterstützt und eine frühzeitige Beteiligung vor Ort sicherstellt.</td></tr>\n    <tr><td headers=\"party\" class=\"gt_row gt_left\">SPD</td>\n<td headers=\"topic\" class=\"gt_row gt_left\">110 - European Community/Union: Negative</td>\n<td headers=\"text\" class=\"gt_row gt_left\">Wir stellen uns konsequent gegen Diskriminierung und Gewalt.</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"3\"> <span data-qmd-base64=\"PGVtPlRoZXNlIHNhbXBsZXMgd2VyZSBjaG9zZW4gYXQgcmFuZG9tPC9lbT4=\"><span class='gt_from_md'><em>These samples were chosen at random</em></span></span></td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare examples dataset (assuming you have columns sentence_coal and sentence)\nexamples <- read_csv(\"sentences_with_topics.csv\") %>%\n  mutate(party = if_else(str_detect(party, \"koalition\"), \"KOALITION\", toupper(party))) %>%\n  group_by(party) %>%\n  slice_sample(n = 2) %>%\n  ungroup() %>%\n  select(party, topic, text)  # Ensure these columns exist in your data\n\n# Create gt table in your style:\nexamples %>%\n  gt() |>\n  cols_label(\n    party = md(\"**Party**\"),\n    text = md(\"*Text*\"),\n    topic = md(\"**Topic**\")\n  ) |>\n  tab_header(\n    title = md(\"**Classification Results**\"),\n    subtitle = \"from coalition and party programs\"\n  ) |>\n  tab_footnote(md(\"*These samples were chosen at random*\")) \n```\n:::\n\n\n:::\n\n\n### Validate, validate, validate\n\n**Does it hold up?** The classification results demonstrate several clear misclassifications that highlight limitations of the pretrained topic model in this context. Sentences related to Fuel Emissions (\"Brennstoffemissionshandelsgesetz\") were classified as \"104 - Military: Positive\", sentences against discrimination and violence as \"110 - European Community/Union: Negative\". Freedom of speech was tagged as \"701 - Labour Groups: Positive\".\n\nAs Grimmer and Stewart (2013) famously emphasize, when working with automatically classified texts you must \"validate, validate, validate.\" The ManifestoBERTa sentence model authors report a top-1 accuracy of 57% and an F1 macro score of 0.45; while seemingly reasonable, these aggregate metrics may mask idiosyncratic errors and biases when applied to new texts or domains [@Burst]. They are meaningless without the comparison to the human gold standard. How well would a human fare at classifying this? Hence, thorough validation, including comparison to manual coding, qualitative inspection, and robustness checks, is essential to ensure trustworthy inferences. Without such validation, reliance solely on published performance measures risks drawing misleading conclusions from noisy or systematically biased automatic classifications [@grimmer2013text].\n\nBy doing a simple sanity check on a few sentences, I can already determine that this model makes too many errors to be used for my task as is. \n\n**Why did this happen?** Pretrained models work brilliantly when applied to data similar to their training corpus. But the manifestoberta model was trained on a specific structure: coded sentences from official party manifestos in the Manifesto Project database. Our documents—extracted from PDFs, split by `tidytext`, with all their formatting quirks—were different enough that the model couldn't reliably generalize. With a little more time, it might make sense to take a pre-trained transformer that is specialized for the german language and fine-tune it only on the seven main topic domains and create separate classifiers within these. \n\n## The Pivot: Using Actual Manifesto Project Data\n\nRather than fighting with the pretrained classifier, since a few years have passed, by now the [Manifesto Project](https://manifesto-project.wzb.eu/information/documents/information) provides the actual coded sentences from these same party programs, already classified by trained human coders (@Lehmann2025).\n\nThis approach has the obvious advantage that it is very reliable: Human-coded classifications from the Manifesto Project are the gold standard for this type of analysis. The trade-off is that I need to re-do the embedding and similarity matching using the Manifesto Project's sentence-level data rather than my PDF extractions. But this potentially improves the analysis as the Manifesto data is cleaner and more consistently structured.\n\n## Loading the Manifesto Project Data\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code for loading the data\"}\nlibrary(manifestoR)\nlibrary(manifestoEnhanceR)\n\nif (!file.exists(\"manifesto_data.fst\")) {\n  # Load German documents from 2021\n  key <- Sys.getenv(\"manifestoAPIkey\")\n  ger_corpus <- mp_corpus(\n    countryname == \"Germany\" & edate > as.Date(\"2020-01-01\"),\n    apikey = key\n  )\n\n  ger_docs <- as_tibble(ger_corpus)\n\n  # Get metadata\n  cmp <- mp_maindataset(south_america = FALSE)\n  meta <- cmp %>%\n    filter(countryname == \"Germany\" & edate > as.Date(\"2020-01-01\")) %>%\n    transmute(\n      manifesto_id = paste0(party, \"_\", date),\n      party,\n      partyname,\n      partyabbrev\n    ) %>%\n    unique()\n\n  ger_docs <- left_join(ger_docs, meta)\n\n  # Extract sentence-level data with topic codes\n  ger_enhanced <- ger_docs %>%\n    mutate(data = map(data, enhance_manifesto_df)) %>%\n    unnest(data)\n\n  fst::write_fst(ger_enhanced,\"manifesto_data.fst\")\n} else {\n  ger_enhanced <- fst::read_fst(\"manifesto_data.fst\")\n}\n```\n:::\n\n\nThe analysis here is made possible by using two wonderful R packages that allow querying the Manifesto Project database directly via its API: [`manifestoR`](https://cran.r-project.org/package=manifestoR) and [`manifestoEnhanceR`](https://github.com/haukelicht/manifestoEnhanceR). **Now, each sentence has a `cmp_code` indicating its policy domain according to the Manifesto coding scheme.**\n\nThis setup is incredibly handy. Having seamless, programmatic access to a rich collection of party manifestos and their detailed coding without manual downloads or preprocessing saves countless hours. It is quite cool to have so many party manifestos at our fingertips with such ease!\n\nThanks to the Manifesto Project team for maintaining this comprehensive database and offering open API access, and to Hauke Licht for creating and sharing the `manifestoEnhanceR` package that enhances data usability with sentence-level metadata. \n\n## Re-embedding with Manifesto Data\n\nNow I repeat the embedding process from Part I, but using the Manifesto Project sentences instead of my PDF extractions. The details are discussed in [Part I](../../2024/03/index.qmd), so I won´t go into it again. \n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Embedding manifesto sentences\"}\nfrom sentence_transformers import SentenceTransformer, util\nimport pandas as pd\nimport torch\nfrom tqdm import tqdm\n\noutput_path = \"manifesto_similarity_results.csv\"\n\nif os.path.exists(output_path):\n  data = pd.read_csv(output_path)\nelse:\n  # load local GPU on mac M3\n  device = torch.device(\"mps\") if torch.backends.mps.is_available() else torch.device(\"cpu\")\n\n  # Load model\n  model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-mpnet-base-v2').to(device)\n\n  # Encode coalition sentences\n  coalition_text = r.sentences[r.sentences['party'] == 'koalition'].reset_index(drop=True).text.values\n  embedding_coal = model.encode(\n      coalition_text,\n      convert_to_tensor=True,\n      show_progress_bar=True,\n      device = device\n  )\n\n  # Prepare output DataFrame\n  data = pd.DataFrame()\n\n  # Define parties to process\n  parties = ['SPD', '90/Greens', 'FDP']\n  target_date = 202109\n\n  for party in tqdm(parties, desc=\"Processing Parties\"):\n      # Get party sentences and reset index\n      party_sentences = r.ger_enhanced[\n              (r.ger_enhanced['partyabbrev'] == party) & \n              (r.ger_enhanced['date'] == target_date)\n          ].reset_index(drop=True)\n      \n      party_text = party_sentences['text'].values\n      party_codes = party_sentences['cmp_code'].values\n      # Encode party sentences\n      embedding_party = model.encode(\n          party_text,\n          convert_to_tensor=True,\n          show_progress_bar=True,\n          device = device\n      )\n      \n      # Compute cosine similarity matrix (party sentences × coalition sentences)\n      cosine_scores = util.pytorch_cos_sim(embedding_party, embedding_coal).cpu().numpy()\n      \n      # Prepare DataFrame for all pairwise combinations including cmp_code\n      rows, cols = cosine_scores.shape\n      results = pd.DataFrame({\n          'party': party,\n          'party_sentence': party_text.repeat(cols),\n          'topic_code': party_codes.repeat(cols),   # repeat to match sentences\n          'coalition_sentence': list(coalition_text) * rows,\n          'similarity_score': cosine_scores.flatten()\n      })\n      \n      # Filter to keep only the best party sentence match per coalition sentence\n      top_matches = (\n          results.sort_values('similarity_score', ascending=False)\n                .groupby(['party', 'coalition_sentence'])\n                .head(1)\n      )\n      \n      data = pd.concat([data, top_matches], ignore_index=True)\n\n  # Save combined results with topic codes\n  data.to_csv(\"manifesto_similarity_results.csv\", index=False)\n```\n:::\n\n\n## Mapping Topics to Party Strengths\n\nNow we can ask the interesting questions: Do sentences attributed to each party fall into their expected policy domains?\n\nThe Manifesto coding scheme groups topics into seven main domains:\n\n1. **External Relations** (Foreign policy, military, international cooperation)\n2. **Freedom & Democracy** (Civil rights, democracy, constitutionalism)\n3. **Political System** (Government efficiency, decentralization, political authority)\n4. **Economy** (Market regulation, planning, protectionism, corporatism)\n5. **Welfare & Quality of Life** (Social justice, education, environment)\n6. **Fabric of Society** (National identity, multiculturalism, tradition)\n7. **Social Groups** (Labor, agriculture, demographic groups)\n\nWe'd expect:\n\n- **Greens**: Strong in Domain 5 (especially environmental protection)\n- **SPD**: Strong in Domains 5 and 7 (welfare expansion, labor groups)\n- **FDP**: Strong in Domain 4 (free market economy, deregulation)\n\nHowever, as discussed in Part I, the automated attribution method that I chose, is not perfect. In cases where similarity scores are very high, it mostly gets it right, everywhere else, its a bit murky. To properly validate it, I would have to code a manual sample, which is a bit too labor intensive, which is why I am proceeding with a conservative approach. I will only evaluate sentences that have a similarity score of .9 or higher. This will exclude about 90% of the data. Hence statements can be made with reference only to the subsample of sentences that are almost copied entirely from party programs. \n\n\n## Topic Distribution across parties\n\nIn the 2021 German federal election, the Social Democratic Party (SPD) received 25.7% of the vote, making them the largest party for the first time since 2002. Alliance 90/The Greens secured 14.7%, achieving their best historical result at the time. The Free Democratic Party (FDP) obtained 11.4% of the vote, making small gains compared to previous elections. These vote shares reflect the relative strength of each party going into coalition talks after the election. However, this does not seem to be reflected in the topic distribution. \n\nWe can see that overall, the topics Welfare and Quality of Life and External Relations seem to dominate the direct contributions from party programs. In all topics, The Greens and the SPD seem to dominate, even in the topic of Economy, with the FDP only contributing a small share. \n\n::: {.panel-tabset}\n\n## Plot \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Topic Domain Distribution in Coalition Agreement](index_files/figure-html/fig-1-topic-plot-1.png){#fig-1-topic-plot width=960}\n:::\n:::\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(readr)\nlibrary(paletteer)\n\n# Load similarity results\nresults <- read_csv(\"manifesto_similarity_results.csv\")\n\n# Select the best match (highest similarity) for each coalition sentence\nbest_matches <- results %>%\n  group_by(coalition_sentence) %>%\n  slice_max(similarity_score, n = 1) %>%\n  filter(similarity_score>=.9) |> \n  ungroup()\n\n# Map topic codes to broader domains\nget_domain <- function(code) {\n  domain_num <- substr(as.character(code), 1, 1)\n  case_when(\n    domain_num == \"1\" ~ \"1 External Relations\",\n    domain_num == \"2\" ~ \"2 Freedom & Democracy\",\n    domain_num == \"3\" ~ \"3 Political System\",\n    domain_num == \"4\" ~ \"4 Economy\",\n    domain_num == \"5\" ~ \"5 Welfare & Quality of Life\",\n    domain_num == \"6\" ~ \"6 Fabric of Society\",\n    domain_num == \"7\" ~ \"7 Social Groups\",\n    TRUE ~ \"Missing\"\n  )\n}\n\nbest_matches <- best_matches %>%\n  mutate(domain = get_domain(topic_code))\n\n# Calculate proportions by domain and party grouped within each domain\ndomain_party_props <- best_matches %>%\n  count(domain, party) %>%\n  ungroup() %>%\n  mutate(total = sum(n)) %>%\n  group_by(party, domain) %>%\n  mutate(prop = n / total) %>%\n  ungroup()\n\ndomain_party_props_in_topic <- best_matches %>%\n  count(domain, party) %>%\n  group_by(domain) %>%\n  mutate(total = sum(n)) %>%\n  group_by(party, domain) %>%\n  mutate(prop = n / total) %>%\n  ungroup()\n\n# Use Frida Kahlo palette colors from paletteer for the parties\nfrida_colors <- c(\n  \"FDP\" = paletteer::paletteer_d(\"lisa::FridaKahlo\")[4],\n  \"90/Greens\" = paletteer::paletteer_d(\"lisa::FridaKahlo\")[2],\n  \"SPD\" = paletteer::paletteer_d(\"lisa::FridaKahlo\")[5]\n)\n\n# Common theme to remove duplicate titles and axis y text from second plot\ncommon_theme <- theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"bottom\",\n    axis.title.x = element_text(size = 12),\n    axis.title.y = element_blank(),\n    axis.text.y = element_text(size = 10)\n  )\n\n# First plot: proportions across whole agreement\np1 <- ggplot(domain_party_props, aes(x = prop, y = domain, fill = party)) +\n  geom_col(position = \"stack\", width = 0.75) +\n  scale_fill_manual(values = frida_colors) +\n  common_theme +\n  labs(\n    title = \"Topic Domain Distribution in Coalition Agreement\",\n    subtitle = \"by party according to best match between program and agreement\",\n    x = \"Proportion across agreement\",\n    fill = \"Party\"\n  )\n\n# Second plot: proportions within each topic domain\np2 <- ggplot(domain_party_props_in_topic, aes(x = prop, y = domain, fill = party)) +\n  geom_col(position = \"stack\", width = 0.75) +\n  scale_fill_manual(values = frida_colors) +\n  common_theme +\n  theme(axis.text.y = element_blank()) +\n  labs(\n    subtitle = \"by party proportion within topic domain\",\n    x = \"Proportion within topic domain\"\n  )\n\n# Combine plots with unified legend and shared x-axis label\ncombined_plot <- (p1 + p2) + \n  plot_layout(guides = \"collect\") & \n  theme(legend.position = \"bottom\")\n\n# Add shared x-axis label using patchwork plot_annotation\ncombined_plot <- combined_plot + \n  plot_annotation(\n    caption = \"Proportions show party influence based on best sentence matches\"\n  ) & \n  theme(plot.caption = element_text(hjust = 0.5, size = 12, face = \"italic\"))\n\ncombined_plot\n```\n:::\n\n\n:::\n<!-- \n\n::: {.tabset}\n\n## Table\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"kovzhddvrm\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#kovzhddvrm table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#kovzhddvrm thead, #kovzhddvrm tbody, #kovzhddvrm tfoot, #kovzhddvrm tr, #kovzhddvrm td, #kovzhddvrm th {\n  border-style: none;\n}\n\n#kovzhddvrm p {\n  margin: 0;\n  padding: 0;\n}\n\n#kovzhddvrm .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#kovzhddvrm .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#kovzhddvrm .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#kovzhddvrm .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#kovzhddvrm .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#kovzhddvrm .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#kovzhddvrm .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#kovzhddvrm .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#kovzhddvrm .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#kovzhddvrm .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#kovzhddvrm .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#kovzhddvrm .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#kovzhddvrm .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#kovzhddvrm .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#kovzhddvrm .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kovzhddvrm .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#kovzhddvrm .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#kovzhddvrm .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#kovzhddvrm .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kovzhddvrm .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#kovzhddvrm .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kovzhddvrm .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#kovzhddvrm .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kovzhddvrm .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kovzhddvrm .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kovzhddvrm .gt_left {\n  text-align: left;\n}\n\n#kovzhddvrm .gt_center {\n  text-align: center;\n}\n\n#kovzhddvrm .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#kovzhddvrm .gt_font_normal {\n  font-weight: normal;\n}\n\n#kovzhddvrm .gt_font_bold {\n  font-weight: bold;\n}\n\n#kovzhddvrm .gt_font_italic {\n  font-style: italic;\n}\n\n#kovzhddvrm .gt_super {\n  font-size: 65%;\n}\n\n#kovzhddvrm .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#kovzhddvrm .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#kovzhddvrm .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#kovzhddvrm .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#kovzhddvrm .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#kovzhddvrm .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#kovzhddvrm .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#kovzhddvrm .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#kovzhddvrm div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style>Policy Domain Ranking by Party</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Domains where each party contributed the most, ranked descending</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"domain\">Policy Domain</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n\">Number of Sentences</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"rank\">Rank</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"3\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"90/Greens\">90/Greens</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">5 Welfare &amp; Quality of Life</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">13</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">1 External Relations</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">11</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">4 Economy</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">5</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">2 Freedom &amp; Democracy</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">4</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">3 Political System</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">2</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">5</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">6 Fabric of Society</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">2</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">6</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">Missing</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">2</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">7</td></tr>\n    <tr><td headers=\"90/Greens  domain\" class=\"gt_row gt_left\">7 Social Groups</td>\n<td headers=\"90/Greens  n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"90/Greens  rank\" class=\"gt_row gt_right\">8</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"3\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"FDP\">FDP</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"FDP  domain\" class=\"gt_row gt_left\">1 External Relations</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">5</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"FDP  domain\" class=\"gt_row gt_left\">2 Freedom &amp; Democracy</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">5</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"FDP  domain\" class=\"gt_row gt_left\">5 Welfare &amp; Quality of Life</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">5</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"FDP  domain\" class=\"gt_row gt_left\">4 Economy</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">3</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"FDP  domain\" class=\"gt_row gt_left\">7 Social Groups</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">3</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">5</td></tr>\n    <tr><td headers=\"FDP  domain\" class=\"gt_row gt_left\">3 Political System</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">2</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">6</td></tr>\n    <tr><td headers=\"FDP  domain\" class=\"gt_row gt_left\">Missing</td>\n<td headers=\"FDP  n\" class=\"gt_row gt_right\">2</td>\n<td headers=\"FDP  rank\" class=\"gt_row gt_right\">7</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"3\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"SPD\">SPD</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"SPD  domain\" class=\"gt_row gt_left\">1 External Relations</td>\n<td headers=\"SPD  n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"SPD  rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"SPD  domain\" class=\"gt_row gt_left\">4 Economy</td>\n<td headers=\"SPD  n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"SPD  rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"SPD  domain\" class=\"gt_row gt_left\">5 Welfare &amp; Quality of Life</td>\n<td headers=\"SPD  n\" class=\"gt_row gt_right\">9</td>\n<td headers=\"SPD  rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"SPD  domain\" class=\"gt_row gt_left\">2 Freedom &amp; Democracy</td>\n<td headers=\"SPD  n\" class=\"gt_row gt_right\">5</td>\n<td headers=\"SPD  rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"SPD  domain\" class=\"gt_row gt_left\">7 Social Groups</td>\n<td headers=\"SPD  n\" class=\"gt_row gt_right\">2</td>\n<td headers=\"SPD  rank\" class=\"gt_row gt_right\">5</td></tr>\n    <tr><td headers=\"SPD  domain\" class=\"gt_row gt_left\">6 Fabric of Society</td>\n<td headers=\"SPD  n\" class=\"gt_row gt_right\">1</td>\n<td headers=\"SPD  rank\" class=\"gt_row gt_right\">6</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n## Code\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate count of sentences by party and domain\nparty_domain_counts <- best_matches %>%\n  count(party, domain) %>%\n  group_by(party) %>%\n  arrange(desc(n), .by_group = TRUE) %>%\n  mutate(rank = row_number()) %>%\n  ungroup()\n\n# Create a table ranking the domains by contribution for each party\nparty_domain_ranking_table <- party_domain_counts %>%\n  select(party, domain, n, rank) %>%\n  gt(groupname_col = \"party\") %>%\n  cols_label(\n    domain = \"Policy Domain\",\n    n = \"Number of Sentences\",\n    rank = \"Rank\"\n  ) %>%\n  tab_header(\n    title = \"Policy Domain Ranking by Party\",\n    subtitle = \"Domains where each party contributed the most, ranked descending\"\n  ) %>%\n  fmt_number(\n    columns = c(n),\n    decimals = 0\n  )\n\nparty_domain_ranking_table\n```\n:::\n\n:::\n -->\n\n## Sub-topic distribution - a more detailed look\n\nLooking at the more detailed topics beyond the main policy domains, the initial hypothesis can largely be confirmed, though the finding is somewhat tentative due to limited data. The Greens show strong positive contributions related to environmentalism and sustainability, as expected. However, the SPD and FDP also have sentences in these areas, albeit to a lesser degree. True to their \"Free Democrats\" name, the FDP's highest contributing subtopic is indeed \"freedom,\" and administrative efficiency, a core campaign issue for the FDP, also appears reflected in the coalition agreement through their party sentences.\n\nOverall, this suggests that coalition agreements are at least partially shaped by the parties’ dominant core issues. Interestingly, vote share does not seem to directly correlate with the volume of contributions, as the Greens have punched well above their weight in terms of textual influence. That said, these results rest on a limited dataset and should be interpreted with caution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Merging Manifesto Code Labels\"}\ntopic_match <- best_matches |> \n  count(party, topic_code) |> \n  rename(code = topic_code)\n\ncodes <- read_csv(\"https://manifesto-project.wzb.eu/down/data/2020a/codebooks/codebook_categories_MPDS2020a.csv\") |> \n  select(code, label)\n\ntopic_match <- topic_match |> \n  left_join(codes)\n```\n:::\n\n\n\n::: {.panel-tabset}\n\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Topic Domain Distribution in Coalition Agreement](index_files/figure-html/fig-2-subtopic-plot-1.png){#fig-2-subtopic-plot width=960}\n:::\n:::\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify top 3 to 5 topics per party\ntop_topics <- topic_match %>%\n  group_by(party) %>%\n  slice_max(order_by = n, n = 5, with_ties = T) %>%\n  ungroup() |> \n  filter(!is.na(label))\n\n# Restrict original data to only those top topics\nfiltered_data <- topic_match %>%\n  semi_join(top_topics, by = c(\"party\", \"code\"))\n\n# Optional: reorder topics by count within each party\nfiltered_data <- filtered_data %>%\n  group_by(party) %>%\n  ungroup()\n\n# Plot\nggplot(filtered_data, aes(x = n, y = reorder_within(str_wrap(label, 18),n, party), fill = party)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~party, ncol = 3, scales = \"free_y\") +\n  scale_fill_manual(values = frida_colors) +\n  scale_y_reordered() +\n  labs(\n    x = \"Count of matched sentences\",\n    y = \"Topic\",\n    title = \"Top Topics by Party in Coalition Agreement\",\n    subtitle = \"Five most frequent topics per party\",\n    caption = \"with ties\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 9),\n    strip.background = element_blank(),\n    strip.text = element_text(face = \"bold\")\n  )\n```\n:::\n\n\n:::\n\n## Lessons learnt\n\n1. **Domain shift and small textual markers matter more than you think**: The gap between training data (clean, structured Manifesto database entries) and application data (PDF \n   extractions with formatting artifacts) was enough to break the classifier. \n\n2. **Conservative thresholds are your friend**: By requiring 0.9+ similarity, \n   I sacrifice 90% of the data but gain confidence in the remaining 10%. In \n   exploratory research, this trade-off is often worthwhile.\n\n## Future Directions\n\n### 1. Validating Attribution with LLMs\n\nThe next step is to validate whether the high-similarity matches actually represent\ngenuine text reuse vs. coincidental similarity. One could use local LLMs via \n`rollama` to:\n\n- Present sentence pairs to Llama 3.1 or Mistral\n- Ask: \"Does sentence B appear to be derived from sentence A?\"\n- Compare LLM judgments against similarity scores\n- Identify false positives where similarity is high but influence is questionable\n\n### 2. Fine-Tuning a Domain-Specific Classifier\n\nRather than using the pretrained manifestoberta model, I could:\n\n- Start with a German language model (e.g., german-gpt2 or gbert-large)\n- Fine-tune on the seven main Manifesto domains rather than 56 granular topics\n- Use the Manifesto Project's coded sentences as training data\n- Create an ensemble of domain-specific classifiers\n\nThis would likely improve accuracy while remaining computationally feasible.\n\n### 3. Sentence-Level Negotiation Analysis\nWith validated attributions, I could investigate:\n\n- Bargaining patterns: Which topics show more \"mixed\" sentences (moderate similarity to multiple parties)?\n- Compromise detection: Can we identify sentences that blend language from multiple programs?\n- Sequential influence: Do sentences from one party tend to cluster together in the agreement?\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}